#include <iostream>
using namespace std;

struct Rational {
	int n; // числитель numerator
	int m; // знаменатель denominator
};

int gcd(int n, int m) { // greatest common divisor, НОД
	if (n == 0) return 1;

	n = (n < 0 ? -n : n);
	m = (m < 0 ? -m : m);
	int mi = (n < m ? n : m);

	int g;
	for (g = mi; g > 1; g--)
		if (n%g == 0 && m%g == 0) break;
	return g;
	
}

void simplify(Rational & r) { // 16/24 = 2/3
	int g = gcd(r.n, r.m);
	r.n /= g;
	r.m /= g;
}

Rational newRational(int n, int m) {
	Rational r;
	r.n = n;
	r.m = m;
	simplify(r);
	return r;
}

void print(Rational r, char del = '\n') {
	cout << r.n << "/" << r.m << del;
}


Rational add(Rational r1, Rational r2) {
	Rational r3;
	r3.m = r1.m*r2.m;
	r3.n = r1.n*r2.m + r2.n*r1.m;
	return r3;
}
Rational add(Rational r, int n) {
	return add(r, newRational(n, 1));
}
Rational add(int n, Rational r) {
	return add(newRational(n, 1), r);
}
Rational sub(Rational r1, Rational r2) {
	Rational r3;
	r3.m = r1.m*r2.m;
	r3.n = r1.n*r2.m - r2.n*r1.m;
	if (r3.n == 0) r3.m = 0;
	return r3;
}
Rational sub(int n, Rational r) {
	return sub(newRational(n, 1), r);
}
Rational sub(Rational r, int n) {
	return sub(r,newRational(n, 1));
}
Rational mul(Rational r1, Rational r2) {
	Rational r3;
	r3.m = r1.m*r2.m;
	r3.n = r1.n*r2.n;
	return r3;
}
Rational mul(int n, Rational r) {
	return mul(newRational(n, 1), r);
}
Rational mul(Rational r, int n) {
	return mul(r, newRational(n, 1));
}
Rational div(Rational r1, Rational r2) {
	Rational r3;
	r3.m = r1.m*r2.n;
	r3.n = r1.n*r2.m;
	return r3;
}
Rational div(Rational r, int n) {
	return div(r, newRational(n, 1));
}
Rational div(int n, Rational r) {
	return div(newRational(n, 1), r);
}

void read(Rational &r) {
	cin >> r.n;
	cin.ignore();
	cin >> r.m;
}
Rational inv(Rational &r) {
	swap(r.n, r.m);
	return r;
}

bool lt(Rational r1, Rational r2) { // less than
	return r1.n*r2.m < r2.n*r1.m;
}
bool gt(Rational r1, Rational r2) {
	return r1.n*r2.m > r2.n*r1.m;
}
bool le(Rational r1, Rational r2) { // less than
	return r1.n*r2.m <= r2.n*r1.m;
}
bool ge(Rational r1, Rational r2) {
	return r1.n*r2.m >= r2.n*r1.m;
}
bool eq(Rational r1, Rational r2) {
	return r1.n*r2.m == r2.n*r1.m;
}
bool ne(Rational r1, Rational r2) {
	return r1.n*r2.m != r2.n*r1.m;
}



int main() {

	int n;
	cin >> n;
	Rational* r=new Rational[n];
	for (int i = 0; i < n; i++) {
		read(r[i]);
	}
	for (int i = 0; i < n-1; i++) {
		for (int j = i + 1;j < n;j++) {
			if (gt(r[i], r[j])) {
				Rational t = r[i];
				r[i] = r[j];
				r[j] = t;
			}
		}
	}
	
	for (int i = 0; i < n - 1; i++) {
		print(r[i], ' ');
	}
	print(r[n - 1]);

	Rational sum = newRational(0, 1);
	for (int i = 0; i < n; i++) {
		sum = add(r[i], sum);
	}
	simplify(sum);
	Rational k=div(sum, n);
	simplify(k);
	print(k);
}